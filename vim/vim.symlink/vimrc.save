" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

colorscheme sonofobsidian
"Inject pathogen plugin for plugings management
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

set nocompatible
let mapleader=","
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif
"Use old regexp engine instead of new one which came with 7.4
"set regexpengine=1
"No column highlighting on cusor position
set nocursorcolumn
"No line highlighting on cusor position
set nocursorline
syntax sync minlines=256

"Leave insert mode
imap ;; <ESC>
vmap ; <ESC>
imap jj <ESC>

" With a map leaser it's possible to do extra key combinations
" like <leader>w do something...
let mapleader = ","
let g:mapleader = ","

"Engances ci(, ci[, ci', ci" commands:

"nnoremap ci( :call New_cib()<CR>

"nnoremap cib :call New_cib()<CR>

"nnoremap ci[ :call New_cisquerebracket()<CR>

onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

"function New_cib()
    "if search("(","bn") == line(".")
        "sil exe "normal! f)ci("
        "sil exe "normal! l"
        "startinsert
    "else
        "sil exe "normal! f(ci("
        "sil exe "normal! l"
        "startinsert
    "endif
"endfunction

"function New_cisquerebracket()
    "if search("[","bn") == line(".")
        "sil exe "normal! f]ci["
        "sil exe "normal! l"
        "startinsert
    "else
        "sil exe "normal! f[ci["
        "sil exe "normal! l"
        "startinsert
    "endif
"endfunction

function! s:NextTextObject(motion, dir)
    let c = nr2char(getchar())

    if c ==# "b"
        let c = "("
    elseif c ==# "B"
        let c = "{"
    elseif c ==# "d"
        let c = "["
    endif

    exe "normal! ".a:dir.c."v".a:motion.c
    "exe ":echo ". shellescape(a:dir.c."v".a:motion.c)
endfunction

function! s:get_visual_selection()
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

" All in english language
set langmenu=en_US
let $LANG = 'en_US'
"source $VIMRUNTIME/delmenu.vim
"source $VIMRUNTIME/menu.vim

" Sets how many lines of history VIM has to remember
set history=1000

" Enable filetype plugins
filetype plugin on
filetype indent on

"set noswapfile
" Save vim helper files in one directory instead in place of a file
set backupdir=$VIM/.vim/backup//
set directory=$VIM/.vim/swap//
set undodir=$VIM/.vim/undo//

set novimhelp


" Set to auto read when a file is changed from the outside
set autoread

" Height of the command bar
set cmdheight=1

"Indicate lines which are longer than 80 characters
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Number line side bar
set number

" Start searching immediately as typing start
set incsearch

" Ignore case when searching
set ignorecase

" Highlight search results
set hlsearch

" Show matching brackets when text indicator is over them
set showmatch

"Toogle fullScreen window
"map <F12> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>

"Search within current line
nmap // /\%<c-r>=line('.')<cr>l

map [[ ?{<CR>w99[{
map ][ /}<CR>b99]}
map ]] j0[[%/{<CR>
map [] k$][%?}<CR>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Romove current file
"map <leader>rm :call delete(expand('%'))

" Return to last edit position when opening files (You want this!)
"augroup vim_autocmd_generic
"    autocmd!
"    autocmd BufReadPost *
"                \ if line("'\"") > 0 && line("'\"") <= line("$") |
"                \   exe "normal! g`\"" |
"                \ endif
"augroup END

" Remember info about open buffers on close
set viminfo^=%

" Do not store global and local values in a session
set ssop-=options

" Do not store folds
" set ssop-=folds

" Show the syntax group name of the item under cursor.
map <leader>h :call SyntaxAttr()<CR>

xnoremap <leader>p "_dP

" To save, ctrl-s.
"nmap <c-s> :w<CR>
"imap <c-s> <Esc>:w<CR>a

" Shortcuts for moving between tabs.
" Alt-j to move to the tab to the left
map <A-j> :tabp <CR>
" Alt-k to move to the tab to the right
map <A-k> :tabn <CR>
"Create new tab:
map <F2> :tabnew <CR>
"move to first tab
noremap gf :tabfirst<CR>
"move to last tab
noremap gl :tablast<CR>

" Shorter shortcuts for moving between windows
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap <C-q> <C-w>q

" Window resizing
nnoremap <C-left> 5<C-w><
nnoremap <C-right> 5<C-w>>
nnoremap <C-up> 5<C-w>-
nnoremap <C-down> 5<C-w>+

" Open Quickfig window for the last search
nnoremap <silent><leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Motions to Ack for things.  Works with pretty much everything, including:
"
"   w, W, e, E, b, B, t*, f*, i*, a*, and custom text objects
"
" Awesome.
"
" Note: If the text covered by a motion contains a newline it won't work.  Ack
" searches line-by-line.

nnoremap <silent> <leader>/ :set opfunc=<SID>AckMotion<CR>g@
xnoremap <silent> <leader>/ :<C-U>call <SID>AckMotion(visualmode())<CR>

function! s:CopyMotionForType(type)
    if a:type ==# 'v'
        silent execute "normal! `<" . a:type . "`>y"
    elseif a:type ==# 'char'
        silent execute "normal! `[v`]y"
    endif
endfunction

function! s:AckMotion(type) abort
    let reg_save = @@

    call s:CopyMotionForType(a:type)

    execute "normal! :Ack! --literal " . shellescape(@@) . "\<cr>"

    let @@ = reg_save
endfunction

"Reselect what has been pasted
nnoremap <leader>V V`]

" Tabs should be converted to a group of 4 spaces.
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab

" Run PHPUnit tests
nmap <leader>t yiw:!phpunit --filter "<cr>
map <leader>tt :!phpunit %<cr>
map <leader>T :!phpunit app/tests/<cr>

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=999

" Use UTF-8.
set encoding=utf-8


" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Jump from outside of pairts: [], {}, (), '', ""
imap <C-l> <ESC>la
"imap <C-l> <ESC>f"a
"imap <C-l> <ESC>f]a
"imap <C-l> <ESC>f)a

" Show line number, cursor position.
set ruler

" Display incomplete commands.
set showcmd

" Show autocomplete menus.
set wildmenu

" Show editing mode
set showmode

" No Error bells, no beeps occur anymore!
augroup no_vim_sound
    autocmd!
    autocmd GUIEnter * set vb t_vb= " for your GUI
    autocmd VimEnter * set vb t_vb=
augroup END

" Font. Very important.
if has('win32') || has('win64')
" set guifont=Monaco:h10
set guifont=Consolas:h10:cANSI
elseif has('unix')
let &guifont="Monospace 10"
endif

augroup vim_autocmd_xml
    autocmd!
    autocmd BufNewFile,BufRead *.xml source ~/vimfiles/ftplugin/xml.vim
augroup END

augroup vim_autocmd_python
    autocmd!
    "imap <c-space> <c-x><c-o>
    autocmd FileType python runtime! autoload/python3complete.vim
augroup END

augroup vim_autocmd_css
    autocmd!
    " CSS folding
    autocmd BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}
augroup END

" PHP folding
"autocmd BufRead,BufNewFile *.php setlocal foldmethod=marker foldmarker=#region,#endregion

"Abbreviations
abbrev gm !php artisan generate:model
abbrev gc !php artisan generate:controller
abbrev gr !php artisan generate:resource
abbrev gv !php artisan generate:view
abbrev gs !php artisan generate:seed
abbrev gmig !php artisan generate:migration
abbrev sdb !php artisan db:seed
abbrev rbdb !php artisan migrate:rollback
abbrev mdb !php artisan migrate


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Zeal offline doc integration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap gz :sil !start "c:\Program Files (x86)\zeal-20140620\zeal.exe" --query "<cword>"<CR>
"nnoremap gz :!zeal --query "<cword>"&<CR><CR>
"let g:investigate_command_for_php = 'c:\Program Files (x86)\zeal-20140620\zeal.exe --query ^s'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Auto completion popup menu  settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"snipMate plugin auto popup enable
"let g:acp_behaviorSnipmateLength = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Auto completion popup menu  settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"imap <a>j <Plug>snipMateNextOrTrigger
"smap <a>j <Plug>snipMateNextOrTrigger
"smap <a>k <Plug>snipMateBack

"Plugin settings

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Easymotion plugin settings
map <leader> <Plug>(easymotion-prefix)
map <leader>f <Plug>(easymotion-s)
let g:EasyMotion_do_mapping = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Repeat.vim plugin setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Syntastic plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_php_checkers = ['php']
let g:syntastic_quiet_messages = { "type": "style" }
let g:syntastic_aggregate_errors = 1
let g:syntastic_auto_jump = 2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Conque plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:ConqueTerm_PyVersion = 3
"let g:ConqueTerm_FastMode = 0
"let g:ConqueTerm_Color = 1
let g:ConqueTerm_SessionSupport = 0
let g:ConqueTerm_ReadUnfocused = 1
"let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_StartMessages = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Yankring plugin conf
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:yankring_replace_n_pkey = '<leader>p'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => AirlLine plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#whitespace#enabled = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => PHPCOMPLETE plugin conf
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:phpcomplete_index_composer_command = 'composer'
augroup vim_autocmd phpCompletion
    autocmd!
    autocmd  FileType  php set omnifunc=phpcomplete_extended#CompletePHP
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ultisnips plugin  settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:UltiSnipsSnippetDirectories=["UltiSnips"]
" Snippets are separated from the engine. Add this if you want them:

let g:snips_author="David"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tern for vim plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:tern_map_keys=1
"let g:tern_show_argument_hints='on_hold'
"let g:tern_show_argument_hints='on_move'
let g:tern_show_signature_in_pum=0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Project plugin  settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:proj_window_increment=25
let g:proj_flags='gimst'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NERDTree plugin  settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDTreeHighlightCursorline=1
nnoremap <silent> <C-n> :ProjectRootExe NERDTreeFind<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => CtrlP plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_by_filename = 1
let g:ctrlp_extensions = ['buffertag', 'rtscript', 'tag']
let g:ctrlp_working_path_mode = 'r'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tagbar plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tagbar_ctags_bin='c:\Program Files (x86)\ctags58\ctags.exe'
nnoremap <silent> <F9> :TagbarToggle<CR>
let g:tagbar_left = 1
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => PHP Documentator plugin 2 settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:pdv_template_dir = $VIM ."/vimfiles/bundle/pdv/templates_snip"
nnoremap <leader>d :call pdv#DocumentWithSnip()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => PHP  folding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>zc <Esc>:EnablePHPFolds<Cr>
map <leader>zo <Esc>:DisablePHPFolds<Cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Cscope settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F3> :!start find . -iname '*.php' > cscope.files<CR>
  \:!start cscope -b -i cscope.files -f cscope.out<CR>
  \:cs reset<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ctags settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=./tags,tags;$HOME
nmap <F4> :!start ctags --fields=+l -R . <CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ConqueTerm plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ConqueTerm_FastMode = 1
let g:ConqueTerm_PyVersion = 3
let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_CWInsert = 1
nmap <leader><leader>c :call conque_term#open('cmd.exe', ['split', 'resize 1']) <CR>
nmap <leader>c :call conque_term#open('cmd.exe', ['split', 'resize 20']) <CR>
nmap <leader>cv :ConqueTermVSplit cmd.exe<CR>
nmap <leader>ct :ConqueTermTab cmd.exe<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YouCompleteme plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:ycm_server_keep_logfiles = 0
"let g:ycm_server_log_level = 'debug'
"let g:ycm_collect_identifiers_from_tags_files = 0
"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_autoclose_preview_window_after_insertion = 1
"let g:ycm_complete_in_comments = 1
"let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_key_detailed_diagnostics = '<leader>ycmd'
"let g:ycm_path_to_python_interpreter = 'c:\Python27\'

"Also Using <tab> for Ultisnips completion
"function! g:UltiSnips_Complete()
"    call UltiSnips#ExpandSnippet()
"    if g:ulti_expand_res == 0
"        if pumvisible()
"            return "\<C-n>"
"        else
"            call UltiSnips#JumpForwards()
"            if g:ulti_jump_forwards_res == 0
"               return "\<TAB>"
"            endif
"        endif
"    endif
"    return ""
"endfunction

"au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
":inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Surround plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Map 'yssc' keys to action that surround line with html comment
let g:surround_99 = "<!-- \r -->"

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

