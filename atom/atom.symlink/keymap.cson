# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson
'atom-text-editor.vim-mode.insert-mode':
    'j': 'exit-insert-mode-if-proceeded-by-j'

'body, .tree-view':
    'alt-k': 'pane:show-next-item'
    'alt-j': 'pane:show-previous-item'

'atom-text-editor.vim-mode:not(.insert-mode)':
    'ctrl-l': 'window:focus-pane-on-right'
    'ctrl-h': 'window:focus-pane-on-left'
    'ctrl-k': 'window:focus-pane-above'
    'ctrl-j': 'window:focus-pane-below'

'.platform-win32, .platform-linux':
    'ctrl-n': 'tree-view:toggle-focus'
    'ctrl-shift-n': 'tree-view:toggle'

'.tree-view':
    'ctrl-alt-c': 'tree-view:copy-full-path'
    'ctrl-q': 'tree-view:toggle'
    'o': 'tree-view:open-selected-entry'

#'body':
#    ':': 'command-palette:toggle'

'atom-text-editor.vim-mode:not(.insert-mode)':
  'l': 'move-to-left-and-unfold-if-folded'
